package main

import (
	"crypto/sha256"
	"fmt"
	"io"
	"io/fs"
	"os"
	"path/filepath"
	"sort"
	"strings"

	"github.com/bmatcuk/doublestar/v4"
)

const outFile = "localtest_gen.go"

var searchPatterns = []string{
	"compose.yaml",
	"services/**",
}

var ignorePatterns = normalizeIgnorePatterns([]string{
	".DS_Store",
	"*.tmp",
	"*.bak",
})

type StackFileMeta struct {
	Path   string
	Size   int64
	Perm   fs.FileMode
	Sha256 string
}

func normalizeIgnorePatterns(patterns []string) []string {
	var out []string
	for _, p := range patterns {
		out = append(out, p)
		if !strings.ContainsAny(p, "/") {
			out = append(out, "**/"+p)
		}
	}
	return out
}

func computeSHA256(path string) (string, error) {
	f, err := os.Open(path)
	if err != nil {
		return "", err
	}
	defer f.Close()

	h := sha256.New()
	if _, err := io.Copy(h, f); err != nil {
		return "", err
	}
	return fmt.Sprintf("%x", h.Sum(nil)), nil
}

func main() {
	var filesMeta []StackFileMeta

	for _, pat := range searchPatterns {
		matches, err := doublestar.Glob(os.DirFS("."), pat)
		if err != nil {
			panic(err)
		}

		for _, rel := range matches {
			skip := false
			for _, ip := range ignorePatterns {
				if ok, _ := doublestar.PathMatch(ip, rel); ok {
					skip = true
					break
				}
			}
			if skip {
				continue
			}

			info, err := os.Stat(rel)
			if err != nil {
				continue
			}
			if info.IsDir() {
				continue
			}

			hash256, err := computeSHA256(rel)
			if err != nil {
				panic(err)
			}

			filesMeta = append(filesMeta, StackFileMeta{
				Path:   filepath.ToSlash(rel),
				Size:   info.Size(),
				Perm:   info.Mode().Perm(),
				Sha256: hash256,
			})
		}
	}

	sort.Slice(filesMeta, func(i, j int) bool {
		return filesMeta[i].Path < filesMeta[j].Path
	})

	f, err := os.Create(outFile)
	if err != nil {
		panic(err)
	}
	defer f.Close()

	fmt.Fprintln(f, "// Code generated by go:generate; DO NOT EDIT.")
	fmt.Fprintln(f, "package main")
	fmt.Fprintln(f, "")
	fmt.Fprintln(f, "import \"embed\"")
	fmt.Fprintln(f, "import \"os\"")
	fmt.Fprintln(f, "")
	for _, file := range filesMeta {
		fmt.Fprintln(f, "//go:embed ", file.Path)
	}
	fmt.Fprintln(f, "var stackFilesFS embed.FS")
	fmt.Fprintln(f, "")
	fmt.Fprintln(f, "type StackFileMeta struct {")
	fmt.Fprintln(f, "\tPath string")
	fmt.Fprintln(f, "\tSize int64")
	fmt.Fprintln(f, "\tPerm os.FileMode")
	fmt.Fprintln(f, "\tSha256 string")
	fmt.Fprintln(f, "}")
	fmt.Fprintln(f, "")
	fmt.Fprintln(f, "var stackFilesMeta = []StackFileMeta{")
	fmt.Printf("Discovered files: %d\n", len(filesMeta))
	for _, file := range filesMeta {
		fmt.Fprintf(f,
			"\t{Path: %q, Perm: 0%o, Size: %d, Sha256: %q},\n",
			file.Path, file.Perm, file.Size, file.Sha256)

		fmt.Printf("%s %s (%.1fK)\n", file.Perm.String(), file.Path, float64(file.Size)/1024)
	}
	fmt.Fprintln(f, "}")
}
